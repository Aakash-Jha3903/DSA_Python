[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Linked_List.circular_LL",
        "description": "Linked_List.circular_LL",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass CircularLinkedList:\n    def __init__(self):\n        self.head = None\n        self.length = 0\n    def display(self):\n        if self.head:",
        "detail": "Linked_List.circular_LL",
        "documentation": {}
    },
    {
        "label": "CircularLinkedList",
        "kind": 6,
        "importPath": "Linked_List.circular_LL",
        "description": "Linked_List.circular_LL",
        "peekOfCode": "class CircularLinkedList:\n    def __init__(self):\n        self.head = None\n        self.length = 0\n    def display(self):\n        if self.head:\n            print(\"This is your Circular Linked List:\")\n            n = self.length\n            temp = self.head\n            for _ in range(n):",
        "detail": "Linked_List.circular_LL",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "Linked_List.circular_LL",
        "description": "Linked_List.circular_LL",
        "peekOfCode": "def menu():\n    linked_list = CircularLinkedList()\n    while True:\n        print(\"\\n0. Create a Circular linked list with N nodes\")\n        print(\"1. Insert at start\")\n        print(\"2. Insert at end\")\n        print(\"3. Delete first node\")\n        print(\"4. Delete last node\")\n        print(\"5. Insert at position\")\n        print(\"6. Delete at position\")",
        "detail": "Linked_List.circular_LL",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Linked_List.Doubly_Linked_List",
        "description": "Linked_List.Doubly_Linked_List",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None\n        self.next = None\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        # self.tail = None\n        self.length = 0",
        "detail": "Linked_List.Doubly_Linked_List",
        "documentation": {}
    },
    {
        "label": "DoublyLinkedList",
        "kind": 6,
        "importPath": "Linked_List.Doubly_Linked_List",
        "description": "Linked_List.Doubly_Linked_List",
        "peekOfCode": "class DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        # self.tail = None\n        self.length = 0\n    def display(self):\n        if self.head:\n            print(\"This is your Doubly Linked List:\")\n            n = self.length\n            temp = self.head",
        "detail": "Linked_List.Doubly_Linked_List",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "Linked_List.Doubly_Linked_List",
        "description": "Linked_List.Doubly_Linked_List",
        "peekOfCode": "def menu():\n    linked_list = DoublyLinkedList()\n    while True:\n        print(\"\\n0. Create a Doubly Linked List with N nodes\")\n        print(\"1. Insert at start\")\n        print(\"2. Insert at end\")\n        print(\"3. Delete first node\")\n        print(\"4. Delete last node\")\n        print(\"5. Insert at position\")\n        print(\"6. Delete at position\")",
        "detail": "Linked_List.Doubly_Linked_List",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Linked_List.node",
        "description": "Linked_List.node",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\na = Node(1)\nb = Node(2)\nc = Node(3)\nd = Node(4)\na.next = b\nb.next = c",
        "detail": "Linked_List.node",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Linked_List.node",
        "description": "Linked_List.node",
        "peekOfCode": "a = Node(1)\nb = Node(2)\nc = Node(3)\nd = Node(4)\na.next = b\nb.next = c\nc.next = d\n# display the data of linked list  \ni = a\n# while (i != None):   # parenthesis is not compulsary ",
        "detail": "Linked_List.node",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Linked_List.node",
        "description": "Linked_List.node",
        "peekOfCode": "b = Node(2)\nc = Node(3)\nd = Node(4)\na.next = b\nb.next = c\nc.next = d\n# display the data of linked list  \ni = a\n# while (i != None):   # parenthesis is not compulsary \n# while i != None:     # \"!=\" can be replace by \"is not\"",
        "detail": "Linked_List.node",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Linked_List.node",
        "description": "Linked_List.node",
        "peekOfCode": "c = Node(3)\nd = Node(4)\na.next = b\nb.next = c\nc.next = d\n# display the data of linked list  \ni = a\n# while (i != None):   # parenthesis is not compulsary \n# while i != None:     # \"!=\" can be replace by \"is not\"\nwhile i is not None:",
        "detail": "Linked_List.node",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "Linked_List.node",
        "description": "Linked_List.node",
        "peekOfCode": "d = Node(4)\na.next = b\nb.next = c\nc.next = d\n# display the data of linked list  \ni = a\n# while (i != None):   # parenthesis is not compulsary \n# while i != None:     # \"!=\" can be replace by \"is not\"\nwhile i is not None:\n    print(i.data)",
        "detail": "Linked_List.node",
        "documentation": {}
    },
    {
        "label": "a.next",
        "kind": 5,
        "importPath": "Linked_List.node",
        "description": "Linked_List.node",
        "peekOfCode": "a.next = b\nb.next = c\nc.next = d\n# display the data of linked list  \ni = a\n# while (i != None):   # parenthesis is not compulsary \n# while i != None:     # \"!=\" can be replace by \"is not\"\nwhile i is not None:\n    print(i.data)\n    i = i.next",
        "detail": "Linked_List.node",
        "documentation": {}
    },
    {
        "label": "b.next",
        "kind": 5,
        "importPath": "Linked_List.node",
        "description": "Linked_List.node",
        "peekOfCode": "b.next = c\nc.next = d\n# display the data of linked list  \ni = a\n# while (i != None):   # parenthesis is not compulsary \n# while i != None:     # \"!=\" can be replace by \"is not\"\nwhile i is not None:\n    print(i.data)\n    i = i.next\n# print(\"The value of a is \")",
        "detail": "Linked_List.node",
        "documentation": {}
    },
    {
        "label": "c.next",
        "kind": 5,
        "importPath": "Linked_List.node",
        "description": "Linked_List.node",
        "peekOfCode": "c.next = d\n# display the data of linked list  \ni = a\n# while (i != None):   # parenthesis is not compulsary \n# while i != None:     # \"!=\" can be replace by \"is not\"\nwhile i is not None:\n    print(i.data)\n    i = i.next\n# print(\"The value of a is \")\n# print(a.data)",
        "detail": "Linked_List.node",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "Linked_List.node",
        "description": "Linked_List.node",
        "peekOfCode": "i = a\n# while (i != None):   # parenthesis is not compulsary \n# while i != None:     # \"!=\" can be replace by \"is not\"\nwhile i is not None:\n    print(i.data)\n    i = i.next\n# print(\"The value of a is \")\n# print(a.data)\n# print(\"The address(next) of a is \")\n# print(a.next)",
        "detail": "Linked_List.node",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Linked_List.Singly_LL",
        "description": "Linked_List.Singly_LL",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.length = 0\n    def insert_at_start(self, data):\n        new_node = Node(data)",
        "detail": "Linked_List.Singly_LL",
        "documentation": {}
    },
    {
        "label": "SinglyLinkedList",
        "kind": 6,
        "importPath": "Linked_List.Singly_LL",
        "description": "Linked_List.Singly_LL",
        "peekOfCode": "class SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.length = 0\n    def insert_at_start(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n        self.length += 1\n    def insert_at_end(self, data):",
        "detail": "Linked_List.Singly_LL",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "Linked_List.Singly_LL",
        "description": "Linked_List.Singly_LL",
        "peekOfCode": "def menu():\n    linked_list = SinglyLinkedList()\n    while True:\n        print(\"\\n1. Insert at start\")\n        print(\"2. Insert at end\")\n        print(\"3. Delete first node\")\n        print(\"4. Delete last node\")\n        print(\"5. Insert at position\")\n        print(\"6. Delete at position\")\n        print(\"7. Display Linked-List\")",
        "detail": "Linked_List.Singly_LL",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "Queue.queue",
        "description": "Queue.queue",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.queue = []\n    def isEmpty(self):\n        return len(self.queue) == 0\n    def enqueue(self, data):\n        self.queue.append(data)\n        print(data, \"added to queue\")\n    def dequeue(self):\n        if not self.isEmpty():",
        "detail": "Queue.queue",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "Queue.queue",
        "description": "Queue.queue",
        "peekOfCode": "def menu():\n    queue = Queue()\n    while True:\n        print(\"\\n0. Create a Queue of n elements \")\n        print(\"1. Enqueue\")\n        print(\"2. Dequeue\")\n        print(\"3. Display Queue\")\n        print(\"4. Exit\\n\")\n        ch = input(\"Enter your choice: \")\n        while ch not in ('0', '1', '2', '3', '4'):",
        "detail": "Queue.queue",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Queue.queue_Linked_List",
        "description": "Queue.queue_Linked_List",
        "peekOfCode": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def isEmpty(self):\n        return self.front is None",
        "detail": "Queue.queue_Linked_List",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "Queue.queue_Linked_List",
        "description": "Queue.queue_Linked_List",
        "peekOfCode": "class Queue:\n    def __init__(self):\n        self.front = None\n        self.rear = None\n    def isEmpty(self):\n        return self.front is None\n    def display(self):\n        if self.isEmpty():\n            print(\"Queue is Empty ! \\nNothing to display\")\n        else:",
        "detail": "Queue.queue_Linked_List",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "Queue.queue_Linked_List",
        "description": "Queue.queue_Linked_List",
        "peekOfCode": "def menu():\n    queue = Queue()\n    while True:\n        print(\"\\n0. Create a Queue of n elements \")\n        print(\"1. Enqueue\")\n        print(\"2. Dequeue\")\n        print(\"3. Display Queue\")\n        print(\"4. Exit\\n\")\n        ch = input(\"Enter your choice: \")\n        while ch not in ('0', '1', '2', '3', '4'):",
        "detail": "Queue.queue_Linked_List",
        "documentation": {}
    },
    {
        "label": "fact_recursive",
        "kind": 2,
        "importPath": "Recursion.factorial",
        "description": "Recursion.factorial",
        "peekOfCode": "def fact_recursive(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * fact_recursive(n - 1)\ndef fact_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result",
        "detail": "Recursion.factorial",
        "documentation": {}
    },
    {
        "label": "fact_iterative",
        "kind": 2,
        "importPath": "Recursion.factorial",
        "description": "Recursion.factorial",
        "peekOfCode": "def fact_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\ndef main():\n    while True:\n        print(\"\\nMenu:\")\n        print(\"1. Calculate Factorial (Recursive)\")\n        print(\"2. Calculate Factorial (Iterative)\")",
        "detail": "Recursion.factorial",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Recursion.factorial",
        "description": "Recursion.factorial",
        "peekOfCode": "def main():\n    while True:\n        print(\"\\nMenu:\")\n        print(\"1. Calculate Factorial (Recursive)\")\n        print(\"2. Calculate Factorial (Iterative)\")\n        print(\"3. Exit\")\n        choice = input(\"Enter your choice: \")\n        while choice not in ('1', '2', '3'):\n            print(\"Invalid choice. Please try again.\")\n            choice = input(\"Enter your choice: \")",
        "detail": "Recursion.factorial",
        "documentation": {}
    },
    {
        "label": "fibo_recursive",
        "kind": 2,
        "importPath": "Recursion.Fibonacci_series",
        "description": "Recursion.Fibonacci_series",
        "peekOfCode": "def fibo_recursive(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibo_recursive(n - 1) + fibo_recursive(n - 2)\ndef fibo_iterative(n):\n    if n == 0:\n        return 0",
        "detail": "Recursion.Fibonacci_series",
        "documentation": {}
    },
    {
        "label": "fibo_iterative",
        "kind": 2,
        "importPath": "Recursion.Fibonacci_series",
        "description": "Recursion.Fibonacci_series",
        "peekOfCode": "def fibo_iterative(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\ndef print_fibonacci_series(n, method):",
        "detail": "Recursion.Fibonacci_series",
        "documentation": {}
    },
    {
        "label": "print_fibonacci_series",
        "kind": 2,
        "importPath": "Recursion.Fibonacci_series",
        "description": "Recursion.Fibonacci_series",
        "peekOfCode": "def print_fibonacci_series(n, method):\n    print(\"Fibonacci series up to\", n, \"terms:\")\n    for i in range(n):\n        if method == 'recursive':\n            print(fibo_recursive(i))\n        else:\n            print(fibo_iterative(i))\ndef get_fibonacci_term(n, method):\n    if method == 'recursive':\n        return fibo_recursive(n)",
        "detail": "Recursion.Fibonacci_series",
        "documentation": {}
    },
    {
        "label": "get_fibonacci_term",
        "kind": 2,
        "importPath": "Recursion.Fibonacci_series",
        "description": "Recursion.Fibonacci_series",
        "peekOfCode": "def get_fibonacci_term(n, method):\n    if method == 'recursive':\n        return fibo_recursive(n)\n    else:\n        return fibo_iterative(n)\ndef main():\n    while True:\n        print(\"\\nMenu:\")\n        print(\"1. Print Fibonacci series up to n terms\")\n        print(\"2. Get the nth term of the Fibonacci series\")",
        "detail": "Recursion.Fibonacci_series",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Recursion.Fibonacci_series",
        "description": "Recursion.Fibonacci_series",
        "peekOfCode": "def main():\n    while True:\n        print(\"\\nMenu:\")\n        print(\"1. Print Fibonacci series up to n terms\")\n        print(\"2. Get the nth term of the Fibonacci series\")\n        print(\"3. Exit\")\n        choice = input(\"Enter your choice: \")\n        while choice not in ('1', '2', '3'):\n            print(\"Invalid choice. Please try again.\")\n            choice = input(\"Enter your choice: \")",
        "detail": "Recursion.Fibonacci_series",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "Stack.stack",
        "description": "Stack.stack",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.stack = []\n    def isEmpty(self):\n        # return self.stack == []\n        return len(self.stack) == 0\n    def pushStack(self, data):\n        self.stack.append(data)\n        print(f\"Pushed {data} onto the stack.\")\n    def popStack(self):",
        "detail": "Stack.stack",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "Stack.stack",
        "description": "Stack.stack",
        "peekOfCode": "def menu():\n    stack = Stack()\n    while True:\n        print(\"\\n0. Create a Stack of n elements \")\n        print(\"1. Push\")\n        print(\"2. Pop\")\n        print(\"3. Peek\")\n        print(\"4. Display Stack\")\n        print(\"5. Exit\\n\")\n        ch = input(\"Enter your choice: \")",
        "detail": "Stack.stack",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "Stack.stack_Linked_List",
        "description": "Stack.stack_Linked_List",
        "peekOfCode": "class Node:\n    def __init__(self,data):\n        self.data = data\n        self.next = None\nclass Stack:\n    def __init__(self):\n        self.head = None\n        self.length = 0\n    def isEmpty(self):\n        return self.head is None",
        "detail": "Stack.stack_Linked_List",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "Stack.stack_Linked_List",
        "description": "Stack.stack_Linked_List",
        "peekOfCode": "class Stack:\n    def __init__(self):\n        self.head = None\n        self.length = 0\n    def isEmpty(self):\n        return self.head is None\n    def display(self):\n        if self.head:\n            print(\"This is your Stack:\")\n            current = self.head",
        "detail": "Stack.stack_Linked_List",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "Stack.stack_Linked_List",
        "description": "Stack.stack_Linked_List",
        "peekOfCode": "def menu():\n    stack = Stack()\n    while True:\n        print(\"\\nMenu:\")\n        print(\"0. Create a Stack of n Nodes\")\n        print(\"1. Push\")\n        print(\"2. Pop\")\n        print(\"3. Peek\")\n        print(\"4. Display\")\n        print(\"5. Exit\")",
        "detail": "Stack.stack_Linked_List",
        "documentation": {}
    }
]